# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-24.04'

variables:
  DockerNamespace: harrisonslater
  DockerSQLImageRepository: harri-schooldemosql-database
  DockerSQLImageName: $(DockerSQLImageRepository):latest
  DockerImageRepository: harri-schooldemoapi
  DockerImageName: $(DockerImageRepository):latest
  DockerVersion: '25.0.5'

  APIPortToTest: 8080
  APIUrlToTest: 'http://localhost:$(APIPortToTest)/'

stages:
- stage: 'RunPostmanAgainstContainer'
  displayName: 'Run Postman Tests Against Container'
  jobs: 
    - job: 'DeployAndTestDockerJob'
      displayName: 'Deploy Docker container (in-agent) and run Postman tests'
      steps:

      - task: DockerInstaller@0
        inputs:
          dockerVersion: $(DockerVersion)

      - script: 'docker pull $(DockerNamespace)/$(DockerImageName)'
        displayName: docker pull REST API Image

      - script: 'docker pull $(DockerNamespace)/$(DockerSQLImageName)'
        displayName: docker pull SQL DB Image

      - script: 'docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=p@ssw0rd" -p 1433:1433 -d $(DockerNamespace)/$(DockerSQLImageName)'
        displayName: docker run - School Demo SQL DB Container
      
      - script: 'docker run -d -p $(APIPortToTest):8080 --add-host=host.docker.internal:host-gateway --name schooldemorestapi harrisonslater/$(DockerImageName)'
        displayName: docker run - School Demo API Container

      - script: 'npm install -g newman'
      - script: |
          cd newman-folder-runner
          npm install
        displayName: newman-folder-runner npm install

# scripts for debugging api container issues
#      - script: 'docker stats --no-stream'
#      - script: 'docker network ls'
#      - script: 'docker network inspect bridge'
#      - script: 'sleep 5'
#      - script: 'curl -X GET -S -L $(APIUrlToTest)openapi'
#      - script: 'curl -X GET -S $(APIUrlToTest)students/123'
#      - script: curl -X GET -S -L $(APIUrlToTest)health --max-time 15 --fail

      - task: Bash@3
        inputs:
          filePath: './pipeline/scripts/wait-for-healthy-container.sh'
          arguments: 'schooldemorestapi 45'
        displayName: bash - Wait for healthy REST API container

#     - task: FileTransform@1
#        displayName: testappsettings.json transform
#        inputs:
#          folderPath: '$(Build.Repository.LocalPath)/src/Tests/Harri.SchoolDemoAPI.Tests.E2E'
#          fileType: 'json'
#          targetFiles: 'testappsettings.json'

      - script: |
          cd $(System.DefaultWorkingDirectory)/postman/collections
          newman run StudentDemoAPI.postman_collection.json --env-var "baseUrl=localhost:8080" --reporters "cli,junit" --reporter-junit-export results.xml --suppress-exit-code 
        displayName: Newman - run StudentDemoAPI.postman_collection.json
        
      - script: |
          chmod +x ./run.sh 
          ./run.sh "./postman/collections/StudentDemoAPI - Students Tests - Data Driven.postman_collection.json"
        displayName: Newman - run all folders StudentDemoAPI - Students Tests - Data Driven.postman_collection.json

      #> output-report.log
      
      #- task: PublishPipelineArtifact@1
      #  inputs:
      #    targetPath: '$(System.DefaultWorkingDirectory)/postman/collections/output-report.log'
      #    artifact: 'output-report.log'
      #    publishLocation: 'pipeline'
      
      - task: PublishTestResults@2
        condition: always()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/*results.xml'
          failTaskOnFailedTests: true
          failTaskOnFailureToPublishResults: true
          failTaskOnMissingResultsFile: true
          searchFolder: newman-reports

      - task: PublishBuildArtifacts@1
        condition: always()
        displayName: 'Publish test results and logs artifact'
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/newman-reports/'
          ArtifactName: 'newman-reports'
          publishLocation: 'Container'
          
- stage: 'PostGithubCommitStatus'
  variables: 
    CommitIdForGitHub: $[coalesce(variables['System.PullRequest.SourceCommitId'], variables['Build.SourceVersion'])]
  displayName: 'Github Commit Status'
  dependsOn:
  - 'RunPostmanAgainstContainer'
  condition: always()
  jobs:
    - job: 'GithubPostSuccessCommitStatus'
      displayName: 'Successful - Update Github Commit Status'
      condition:  succeeded()
      steps:
      - checkout: none
      - template: /pipeline/tasks/rest-github-commit-check.yml
        parameters:
          commitid: $(CommitIdForGitHub)
          state: 'success'
          description: 'The build succeeded'
          path: 'HarrisonSlater/Harri.SchoolDemoAPI.Postman'
    - job: 'GithubPostFailureCommitStatus'
      displayName: 'Failure - Update Github Commit Status'
      condition: failed()
      steps:
      - checkout: none
      - template: /pipeline/tasks/rest-github-commit-check.yml
        parameters:
          commitid: $(CommitIdForGitHub)
          state: 'failure'
          description: 'The build failed'
          path: 'HarrisonSlater/Harri.SchoolDemoAPI.Postman'