{
	"info": {
		"_postman_id": "58aa69b4-eb17-48d2-81f4-fbd027282605",
		"name": "StudentDemoAPI",
		"description": "## API Overview\n\nThe **StudentDemoAPI** is a RESTful service for managing student records.\n\nIt demonstrates best practices in API design, including:\n\n- **Structured endpoints** for data management\n    \n- **Pagination, sorting, and filtering** capabilities\n    \n- **Standard HTTP status codes**\n    \n- **Health check endpoint** for service monitoring\n    \n- ETag implementation for **optimistic concurrency** for PUT and PATCH methods\n    \n\n### Links\n\n- [GitHub for this Postman collection](https://github.com/HarrisonSlater/Harri.SchoolDemoAPI.Postman)\n    \n- [GitHub for REST API and setup](https://github.com/HarrisonSlater/Harri.SchoolDemoAPI)\n\n>If you've cloned the repo for this collection you will have a Local.postman_environment.json file that can be imported containing the default baseUrl of 'localhost:8080'",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2608227",
		"_collection_link": "https://harridev.postman.co/workspace/6030e031-453c-4baf-8614-0fed30f79527/collection/2608227-58aa69b4-eb17-48d2-81f4-fbd027282605?action=share&source=collection_link&creator=2608227"
	},
	"item": [
		{
			"name": "students",
			"item": [
				{
					"name": "{sId}",
					"item": [
						{
							"name": "Get Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const responseData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields: sId, name, and GPA\", function () {\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.all.keys('sId', 'name', 'GPA');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"GPA is a number and within the valid range\", function () {\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.GPA).to.exist.and.to.be.a('number').and.to.be.within(0, 4.0);\r",
											"});\r",
											"\r",
											"pm.test(\"Name must be a non-empty string\", function () {\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"pm.test(\"ETag header is present and has a value\", function() {\r",
											"\r",
											"    pm.expect(pm.response.headers.has('ETag')).to.be.true;\r",
											"    pm.expect(pm.response.headers.get('ETag')).to.not.be.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/students/:sId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"students",
										":sId"
									],
									"variable": [
										{
											"key": "sId",
											"value": "999",
											"description": "(Required) Student Id"
										}
									]
								},
								"description": "Retrieves details of a specific student by ID"
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "localhost:8080/students/:sId",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "1",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 03:31:44 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "ETag",
											"value": "AAAAAAAAD6E="
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"sId\": 1,\n    \"name\": \"Olivia Jackson\",\n    \"GPA\": 1.42\n}"
								},
								{
									"name": "404 Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "10001",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 03:33:58 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.5\",\n    \"title\": \"Not Found\",\n    \"status\": 404,\n    \"traceId\": \"00-df3f2e5c143373641f4c7dd16c72a785-94d1ccf23f1a388d-00\"\n}"
								},
								{
									"name": "400 Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "2147483648",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 03:34:51 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n    \"title\": \"One or more validation errors occurred.\",\n    \"status\": 400,\n    \"errors\": {\n        \"sId\": [\n            \"The value '2147483648' is not valid.\"\n        ]\n    },\n    \"traceId\": \"00-aaca48a5d751576fdfa7565e32d19971-0a8f37a36e2260bf-00\"\n}"
								}
							]
						},
						{
							"name": "Update Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is empty\", function() {\r",
											"    pm.expect(pm.response.body).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestPath = pm.request.url.getPath()\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + requestPath,\r",
											"    method: 'GET'\r",
											"}, function (err, res) {\r",
											"\r",
											"    const etag = res.headers.get(\"etag\")\r",
											"    pm.variables.set(\"ExistingStudentETagHeader\", etag);\r",
											"\r",
											"    console.info(`Retrieved ETag ${etag} for ${pm.request.url.getPath()}, and set on ${pm.request.method}`)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "If-Match",
										"value": "{{ExistingStudentETagHeader}}",
										"description": "(Required) Value from ETag Header returned on GET. Auto set in pre-request script",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Mia Fernández\",\n    \"GPA\": 3.03\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/students/:sId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"students",
										":sId"
									],
									"variable": [
										{
											"key": "sId",
											"value": "999",
											"description": "(Required) Student Id"
										}
									]
								},
								"description": "Replaces the details of an existing student"
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "If-Match",
												"value": "AAAAAAAAE4s=",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Mia Fernández\",\n  \"GPA\": 3.51\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/students/:sId",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "999",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Length",
											"value": "0"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 03:51:43 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "428 Precondition Required (Missing If-Match header)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Mia Fernández\",\n  \"GPA\": 3.51\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "999",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Precondition Required",
									"code": 428,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 03:48:32 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": 428,\n    \"traceId\": \"00-d8b2ee33e0357ed85e11bd20f69342a9-34c669df6b42f6df-00\"\n}"
								},
								{
									"name": "412 Precondition Failed (Bad If-Match header value)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "If-Match",
												"value": "BadValue",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Mia Fernández\",\n  \"GPA\": 3.51\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "999",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 03:50:45 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.13\",\n    \"title\": \"Precondition Failed\",\n    \"status\": 412,\n    \"traceId\": \"00-4e2807fa2a2b4c4d5df968ffae34a376-c211a8f385752ccb-00\"\n}"
								},
								{
									"name": "400 Bad Request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "AAAAAAAAE4s=",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"GPA\": 3.51\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "999",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 04:01:46 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n    \"title\": \"One or more validation errors occurred.\",\n    \"status\": 400,\n    \"errors\": {\n        \"name\": [\n            \"The name field is required.\"\n        ]\n    },\n    \"traceId\": \"00-ee8bd80ac539a6cc7ccaa10b55958953-edee85a90af8a95d-00\"\n}"
								},
								{
									"name": "404 Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "AAAAAAAAE4s=",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Mia Fernández\",\n    \"GPA\": 3.03\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "10001",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 04:03:37 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.5\",\n    \"title\": \"Not Found\",\n    \"status\": 404,\n    \"traceId\": \"00-e32495ae35acf4c960cf1c2cedec6cc5-df21f48db360a399-00\"\n}"
								}
							]
						},
						{
							"name": "Patch Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has values\", function() {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.keys(\"sId\", \"name\", \"GPA\");\r",
											"    pm.expect(responseBody.name).to.be.a('string')\r",
											"    pm.expect(responseBody.sId).to.be.a('number')\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestPath = pm.request.url.getPath()\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + requestPath,\r",
											"    method: 'GET'\r",
											"}, function (err, res) {\r",
											"\r",
											"    const etag = res.headers.get(\"etag\")\r",
											"    pm.variables.set(\"ExistingStudentETagHeader\", etag);\r",
											"\r",
											"    console.info(`Retrieved ETag ${etag} for ${pm.request.url.getPath()}, and set If-Match on ${pm.request.method}`)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "If-Match",
										"value": "{{ExistingStudentETagHeader}}",
										"description": "(Required) Value from ETag Header returned on GET. Auto set in pre-request script",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ethan Davies\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/students/:sId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"students",
										":sId"
									],
									"variable": [
										{
											"key": "sId",
											"value": "998",
											"description": "(Required) Student Id"
										}
									]
								},
								"description": "Partially updates details of an existing student\n\n> This method does not implement the standard JSON Patch of type 'application/json-patch+json' instead opting for a simpler implementation mirroring the PUT method above but allowing for properties to be unmodified when sending partial json bodies"
							},
							"response": [
								{
									"name": "200 OK - name",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "If-Match",
												"value": "AAAAAAAAE4o=",
												"description": "(Required) Value from ETag Header returned on GET",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Ethan Davies\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/students/:sId",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "998",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 04:08:32 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"sId\": 998,\n    \"name\": \"Ethan Davies\",\n    \"GPA\": 3.27\n}"
								},
								{
									"name": "200 OK - GPA",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "If-Match",
												"value": "AAAAAAABtYM=",
												"description": "(Required) Value from ETag Header returned on GET",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"GPA\": 3.33\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "998",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 04:15:06 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"sId\": 998,\n    \"name\": \"Ethan Davies\",\n    \"GPA\": 3.33\n}"
								},
								{
									"name": "428 Precondition Required (Missing If-Match header) Copy",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Ethan Davies\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "998",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Precondition Required",
									"code": 428,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 03:48:32 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": 428,\n    \"traceId\": \"00-d8b2ee33e0357ed85e11bd20f69342a9-34c669df6b42f6df-00\"\n}"
								},
								{
									"name": "412 Precondition Failed (Bad If-Match header value)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "If-Match",
												"value": "BadValue",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Ethan Davies\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "998",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 03:50:45 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.13\",\n    \"title\": \"Precondition Failed\",\n    \"status\": 412,\n    \"traceId\": \"00-4e2807fa2a2b4c4d5df968ffae34a376-c211a8f385752ccb-00\"\n}"
								},
								{
									"name": "400 Bad Request",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "If-Match",
												"value": "AAAAAAABtYM=",
												"description": "(Required) Value from ETag Header returned on GET",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": null\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "998",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 04:13:32 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n    \"title\": \"One or more validation errors occurred.\",\n    \"status\": 400,\n    \"errors\": {\n        \"name\": [\n            \"The field name is invalid.\"\n        ]\n    },\n    \"traceId\": \"00-e71a5c29adffc8a39cff478825831ddc-fc97c6d599f6d356-00\"\n}"
								},
								{
									"name": "404 Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "AAAAAAAAE4s=",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Ethan Davies\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "10001",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 04:03:37 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.5\",\n    \"title\": \"Not Found\",\n    \"status\": 404,\n    \"traceId\": \"00-e32495ae35acf4c960cf1c2cedec6cc5-df21f48db360a399-00\"\n}"
								}
							]
						},
						{
							"name": "Delete Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/students/:sId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"students",
										":sId"
									],
									"variable": [
										{
											"key": "sId",
											"value": "1000",
											"description": "(Required) Student Id"
										}
									]
								},
								"description": "Deletes a student record"
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "localhost:8080/students/:sId",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "2055",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Length",
											"value": "0"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 04:18:39 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										}
									],
									"cookie": [],
									"body": null
								},
								{
									"name": "409 Conflict",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "2055",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Length",
											"value": "0"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 04:18:39 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										}
									],
									"cookie": [],
									"body": null
								},
								{
									"name": "404 Not Found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "10001",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 04:20:10 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.5\",\n    \"title\": \"Not Found\",\n    \"status\": 404,\n    \"traceId\": \"00-0a194774a20ccd053f6c6e12495effe5-3af43fcb5a020b0a-00\"\n}"
								},
								{
									"name": "400 Bad Request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/students/:sId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"students",
												":sId"
											],
											"variable": [
												{
													"key": "sId",
													"value": "-1",
													"description": "(Required) Student Id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Aug 2025 04:20:33 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n    \"title\": \"One or more validation errors occurred.\",\n    \"status\": 400,\n    \"errors\": {\n        \"sId\": [\n            \"Integer should be positive\"\n        ]\n    },\n    \"traceId\": \"00-7ac534f723028bb911446c5b208afb01-50d74bbf81b53e09-00\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Add Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a number above 1000\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // The harri-schooldemosql-database image is prefilled with 1000 students\r",
									"    pm.expect(responseData).to.be.a('number').and.to.be.above(1000);\r",
									"    console.log(\"Student created: \" + responseData)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"New Postman student\",\n  \"GPA\": 1.99\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/students",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"students"
							]
						},
						"description": "Creates a new student record"
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"New Postman student\",\n  \"GPA\": 1.99\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/students",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Aug 2025 04:46:52 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "7873"
						},
						{
							"name": "400 Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"GPA\": 1.9923\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/students",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"students"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Aug 2025 04:48:05 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n    \"title\": \"One or more validation errors occurred.\",\n    \"status\": 400,\n    \"errors\": {\n        \"GPA\": [\n            \"'GPA' must not be more than 3 digits in total, with allowance for 2 decimals. 5 digits and 4 decimals were found.\"\n        ],\n        \"name\": [\n            \"The name field is required.\"\n        ]\n    },\n    \"traceId\": \"00-06d6e05e21fb3d5c7585dc487c906604-76bf07b6d474eccb-00\"\n}"
						}
					]
				},
				{
					"name": "Get Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status code is 200\r",
									"pm.test(\"Status code is 200 or 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									"// Validate the response structure\r",
									"if (pm.response.code === 200) {\r",
									"    const response = pm.response.json();\r",
									"    pm.test(\"Response has items array\", function () {\r",
									"        pm.expect(response).to.be.an('object');\r",
									"        pm.expect(response.items).to.exist;\r",
									"        pm.expect(response.items).to.be.an('array');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response has pagination properties\", function () {\r",
									"        pm.expect(response).to.be.an('object');\r",
									"\r",
									"        pm.expect(response.page).to.exist.and.be.greaterThan(0);\r",
									"        pm.expect(response.pageSize).to.exist.and.be.greaterThan(0);\r",
									"        pm.expect(response.totalCount).to.exist.and.be.greaterThan(0);\r",
									"        pm.expect(response.totalPageCount).to.exist.and.be.greaterThan(0);\r",
									"        \r",
									"        pm.expect(response.hasNextPage).to.exist.and.be.a('boolean');\r",
									"        pm.expect(response.hasPreviousPage).to.exist.and.be.a('boolean');\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/students",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"students"
							],
							"query": [
								{
									"key": "sId",
									"value": "1",
									"description": "Loose search",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Ben",
									"description": "Loose search",
									"disabled": true
								},
								{
									"key": "GPA.IsNull",
									"value": "false",
									"description": "Not compatible with other GPA parameters",
									"disabled": true
								},
								{
									"key": "GPA.Lt",
									"value": "3.52",
									"description": "GPA.Lt and GPA.Gt are compatible with each other",
									"disabled": true
								},
								{
									"key": "GPA.Gt",
									"value": "2.51",
									"description": "GPA.Lt and GPA.Gt are compatible with each other",
									"disabled": true
								},
								{
									"key": "GPA.Eq",
									"value": "4",
									"description": "Strict matching. Not compatible with other GPA parameters",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "pageSize",
									"value": "10",
									"disabled": true
								},
								{
									"key": "sortColumn",
									"value": "name",
									"description": "'sId', 'name', or 'GPA'. Default sId",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "DESC",
									"description": "'ASC' or 'DESC'. Default ASC",
									"disabled": true
								}
							]
						},
						"description": "Retrieves a paginated list of students, with optional filtering and sorting"
					},
					"response": [
						{
							"name": "200 OK - Get all students",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "localhost:8080/students",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students"
									],
									"query": [
										{
											"key": "sId",
											"value": "1",
											"description": "Loose search",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Ben",
											"description": "Loose search",
											"disabled": true
										},
										{
											"key": "GPA.IsNull",
											"value": "false",
											"description": "Not compatible with other GPA parameters",
											"disabled": true
										},
										{
											"key": "GPA.Lt",
											"value": "3.52",
											"description": "GPA.Lt and GPA.Gt are compatible with each other",
											"disabled": true
										},
										{
											"key": "GPA.Gt",
											"value": "2.43",
											"description": "GPA.Lt and GPA.Gt are compatible with each other",
											"disabled": true
										},
										{
											"key": "GPA.Eq",
											"value": "4",
											"description": "Strict matching. Not compatible with other GPA parameters",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "10",
											"disabled": true
										},
										{
											"key": "sortColumn",
											"value": "GPA",
											"description": "'sId', 'name', or 'GPA'",
											"disabled": true
										},
										{
											"key": "orderBy",
											"value": "DESC",
											"description": "'ASC' or 'DESC'",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Aug 2025 01:15:59 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"items\": [\n        {\n            \"sId\": 1,\n            \"name\": \"Olivia Jackson\",\n            \"GPA\": 1.42\n        },\n        {\n            \"sId\": 2,\n            \"name\": \"Noah Taylor\",\n            \"GPA\": 2.09\n        },\n        {\n            \"sId\": 3,\n            \"name\": \"test\",\n            \"GPA\": 1\n        },\n        {\n            \"sId\": 4,\n            \"name\": \"Benjamin Taylor\",\n            \"GPA\": 1.77\n        },\n        {\n            \"sId\": 5,\n            \"name\": \"Logan Taylor\",\n            \"GPA\": 1.5\n        },\n        {\n            \"sId\": 6,\n            \"name\": \"Harper Smith\",\n            \"GPA\": 2.85\n        },\n        {\n            \"sId\": 7,\n            \"name\": \"Liam Gonzalez\",\n            \"GPA\": 2.53\n        },\n        {\n            \"sId\": 8,\n            \"name\": \"Liam Jackson\",\n            \"GPA\": 1.25\n        },\n        {\n            \"sId\": 9,\n            \"name\": \"Alexander Lopez\",\n            \"GPA\": 2.44\n        },\n        {\n            \"sId\": 10,\n            \"name\": \"Harper Jones\",\n            \"GPA\": 3.94\n        }\n    ],\n    \"page\": 1,\n    \"pageSize\": 10,\n    \"totalCount\": 1174,\n    \"totalPageCount\": 118,\n    \"hasNextPage\": true,\n    \"hasPreviousPage\": false\n}"
						},
						{
							"name": "200 OK - Name search",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/students?name=Ben",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"students"
									],
									"query": [
										{
											"key": "sId",
											"value": "1",
											"description": "Loose search",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Ben",
											"description": "Loose search"
										},
										{
											"key": "GPA.IsNull",
											"value": "false",
											"description": "Not compatible with other GPA parameters",
											"disabled": true
										},
										{
											"key": "GPA.Lt",
											"value": "3.52",
											"description": "GPA.Lt and GPA.Gt are compatible with each other",
											"disabled": true
										},
										{
											"key": "GPA.Gt",
											"value": "2.43",
											"description": "GPA.Lt and GPA.Gt are compatible with each other",
											"disabled": true
										},
										{
											"key": "GPA.Eq",
											"value": "4",
											"description": "Strict matching. Not compatible with other GPA parameters",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "10",
											"disabled": true
										},
										{
											"key": "sortColumn",
											"value": "GPA",
											"description": "'sId', 'name', or 'GPA'",
											"disabled": true
										},
										{
											"key": "orderBy",
											"value": "DESC",
											"description": "'ASC' or 'DESC'",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Aug 2025 01:17:22 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"items\": [\n        {\n            \"sId\": 4,\n            \"name\": \"Benjamin Taylor\",\n            \"GPA\": 1.77\n        },\n        {\n            \"sId\": 18,\n            \"name\": \"Benjamin Lopez\",\n            \"GPA\": 3.69\n        },\n        {\n            \"sId\": 27,\n            \"name\": \"Benjamin Miller\",\n            \"GPA\": 3.23\n        },\n        {\n            \"sId\": 32,\n            \"name\": \"Benjamin Williams\",\n            \"GPA\": 3.5\n        },\n        {\n            \"sId\": 44,\n            \"name\": \"Benjamin Lopez\",\n            \"GPA\": 3.16\n        },\n        {\n            \"sId\": 53,\n            \"name\": \"Benjamin Martinez\",\n            \"GPA\": 2\n        },\n        {\n            \"sId\": 59,\n            \"name\": \"Benjamin Garcia\",\n            \"GPA\": 2.34\n        },\n        {\n            \"sId\": 85,\n            \"name\": \"Benjamin Miller\",\n            \"GPA\": 2.21\n        },\n        {\n            \"sId\": 90,\n            \"name\": \"Benjamin Taylor\",\n            \"GPA\": 1.9\n        },\n        {\n            \"sId\": 108,\n            \"name\": \"Benjamin Thomas\",\n            \"GPA\": 3.92\n        }\n    ],\n    \"page\": 1,\n    \"pageSize\": 10,\n    \"totalCount\": 51,\n    \"totalPageCount\": 6,\n    \"hasNextPage\": true,\n    \"hasPreviousPage\": false\n}"
						},
						{
							"name": "200 OK - Name and sId search",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/students?sId=21&name=Williams&sortColumn=GPA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"students"
									],
									"query": [
										{
											"key": "sId",
											"value": "21",
											"description": "Loose search"
										},
										{
											"key": "name",
											"value": "Williams",
											"description": "Loose search"
										},
										{
											"key": "GPA.IsNull",
											"value": "false",
											"description": "Not compatible with other GPA parameters",
											"disabled": true
										},
										{
											"key": "GPA.Lt",
											"value": "3.52",
											"description": "GPA.Lt and GPA.Gt are compatible with each other",
											"disabled": true
										},
										{
											"key": "GPA.Gt",
											"value": "2.43",
											"description": "GPA.Lt and GPA.Gt are compatible with each other",
											"disabled": true
										},
										{
											"key": "GPA.Eq",
											"value": "4",
											"description": "Strict matching. Not compatible with other GPA parameters",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "10",
											"disabled": true
										},
										{
											"key": "sortColumn",
											"value": "GPA",
											"description": "'sId', 'name', or 'GPA'"
										},
										{
											"key": "orderBy",
											"value": "DESC",
											"description": "'ASC' or 'DESC'",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Aug 2025 01:19:35 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"items\": [\n        {\n            \"sId\": 21,\n            \"name\": \"Amelia Williams\",\n            \"GPA\": 1.18\n        },\n        {\n            \"sId\": 621,\n            \"name\": \"Ethan Williams\",\n            \"GPA\": 2.33\n        }\n    ],\n    \"page\": 1,\n    \"pageSize\": 10,\n    \"totalCount\": 2,\n    \"totalPageCount\": 1,\n    \"hasNextPage\": false,\n    \"hasPreviousPage\": false\n}"
						},
						{
							"name": "200 OK - Large query, last page",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/students?name=smith&GPA.IsNull=false&page=5&pageSize=12&sortColumn=name&orderBy=DESC",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"students"
									],
									"query": [
										{
											"key": "sId",
											"value": "1",
											"description": "Loose search",
											"disabled": true
										},
										{
											"key": "name",
											"value": "smith",
											"description": "Loose search"
										},
										{
											"key": "GPA.IsNull",
											"value": "false",
											"description": "Not compatible with other GPA parameters"
										},
										{
											"key": "GPA.Lt",
											"value": "4",
											"description": "GPA.Lt and GPA.Gt are compatible with each other",
											"disabled": true
										},
										{
											"key": "GPA.Gt",
											"value": "0",
											"description": "GPA.Lt and GPA.Gt are compatible with each other",
											"disabled": true
										},
										{
											"key": "GPA.Eq",
											"value": "4",
											"description": "Strict matching. Not compatible with other GPA parameters",
											"disabled": true
										},
										{
											"key": "page",
											"value": "5"
										},
										{
											"key": "pageSize",
											"value": "12"
										},
										{
											"key": "sortColumn",
											"value": "name",
											"description": "'sId', 'name', or 'GPA'. Default sId"
										},
										{
											"key": "orderBy",
											"value": "DESC",
											"description": "'ASC' or 'DESC'. Default ASC"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Aug 2025 01:35:21 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"items\": [\n        {\n            \"sId\": 505,\n            \"name\": \"Ava Smith\",\n            \"GPA\": 3.95\n        },\n        {\n            \"sId\": 166,\n            \"name\": \"Aria Smith\",\n            \"GPA\": 2.83\n        },\n        {\n            \"sId\": 156,\n            \"name\": \"Alexander Smith\",\n            \"GPA\": 2.53\n        },\n        {\n            \"sId\": 294,\n            \"name\": \"Alexander Smith\",\n            \"GPA\": 3.7\n        },\n        {\n            \"sId\": 219,\n            \"name\": \"Alexander Smith\",\n            \"GPA\": 2.37\n        },\n        {\n            \"sId\": 968,\n            \"name\": \"Alexander Smith\",\n            \"GPA\": 3.8\n        }\n    ],\n    \"page\": 5,\n    \"pageSize\": 12,\n    \"totalCount\": 54,\n    \"totalPageCount\": 5,\n    \"hasNextPage\": false,\n    \"hasPreviousPage\": true\n}"
						},
						{
							"name": "204 No Content - No students found for query",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/students?name=Steve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"students"
									],
									"query": [
										{
											"key": "sId",
											"value": "1",
											"description": "Loose search",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Steve",
											"description": "Loose search"
										},
										{
											"key": "GPA.IsNull",
											"value": "false",
											"description": "Not compatible with other GPA parameters",
											"disabled": true
										},
										{
											"key": "GPA.Lt",
											"value": "4",
											"description": "GPA.Lt and GPA.Gt are compatible with each other",
											"disabled": true
										},
										{
											"key": "GPA.Gt",
											"value": "0",
											"description": "GPA.Lt and GPA.Gt are compatible with each other",
											"disabled": true
										},
										{
											"key": "GPA.Eq",
											"value": "4",
											"description": "Strict matching. Not compatible with other GPA parameters",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "10",
											"disabled": true
										},
										{
											"key": "sortColumn",
											"value": "name",
											"description": "'sId', 'name', or 'GPA'. Default sId",
											"disabled": true
										},
										{
											"key": "orderBy",
											"value": "DESC",
											"description": "'ASC' or 'DESC'. Default ASC",
											"disabled": true
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Date",
									"value": "Wed, 13 Aug 2025 01:39:57 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								}
							],
							"cookie": [],
							"body": null
						},
						{
							"name": "400 Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/students?sId=-1&GPA.IsNull=0&GPA.Lt=-792281625142643375&GPA.Gt=nothing&GPA.Eq=79228162514264337593543950336&page=1.5&pageSize=2147483648&sortColumn=BADVALUE&orderBy=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"students"
									],
									"query": [
										{
											"key": "sId",
											"value": "-1",
											"description": "Loose search"
										},
										{
											"key": "name",
											"value": "Ben",
											"description": "Loose search",
											"disabled": true
										},
										{
											"key": "GPA.IsNull",
											"value": "0",
											"description": "Not compatible with other GPA parameters"
										},
										{
											"key": "GPA.Lt",
											"value": "-792281625142643375",
											"description": "GPA.Lt and GPA.Gt are compatible with each other"
										},
										{
											"key": "GPA.Gt",
											"value": "nothing",
											"description": "GPA.Lt and GPA.Gt are compatible with each other"
										},
										{
											"key": "GPA.Eq",
											"value": "79228162514264337593543950336",
											"description": "Strict matching. Not compatible with other GPA parameters"
										},
										{
											"key": "page",
											"value": "1.5"
										},
										{
											"key": "pageSize",
											"value": "2147483648"
										},
										{
											"key": "sortColumn",
											"value": "BADVALUE",
											"description": "'sId', 'name', or 'GPA'. Default sId"
										},
										{
											"key": "orderBy",
											"value": "0",
											"description": "'ASC' or 'DESC'. Default ASC"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Aug 2025 03:24:08 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n    \"title\": \"One or more validation errors occurred.\",\n    \"status\": 400,\n    \"errors\": {\n        \"sId\": [\n            \"Integer should be positive\"\n        ],\n        \"page\": [\n            \"The value '1.5' is not valid.\"\n        ],\n        \"orderBy\": [\n            \"The value 'BADVALUE' is not valid.\"\n        ],\n        \"pageSize\": [\n            \"The value '2147483648' is not valid.\"\n        ],\n        \"sortColumn\": [\n            \"The field sortColumn is invalid.\"\n        ],\n        \"GPA.Eq\": [\n            \"The value '79228162514264337593543950336' is not valid for eq.\"\n        ],\n        \"GPA.Gt\": [\n            \"The value 'nothing' is not valid for gt.\"\n        ],\n        \"GPA.Lt\": [\n            \"Number should be positive\"\n        ],\n        \"GPA.IsNull\": [\n            \"The value '0' is not valid for isNull.\"\n        ]\n    },\n    \"traceId\": \"00-02a81a452764edd85af13713c051f055-b7f163b85768d3cd-00\"\n}"
						}
					]
				}
			],
			"description": "Endpoints for creating, retrieving, updating, and deleting student records"
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is Healthy\", function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.have.property('status', 'Healthy')\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Checks the API’s operational status and connected dependencies.\n\n> When deployed in a container docker can use this endpoint as part of the container health check"
			},
			"response": [
				{
					"name": "200 OK",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/health",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"health"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": null,
					"header": [
						{
							"key": "content-type",
							"value": "application/json"
						},
						{
							"key": "date",
							"value": "Tue, 12 Aug 2025 09:33:07 GMT"
						},
						{
							"key": "server",
							"value": "Kestrel"
						},
						{
							"key": "cache-control",
							"value": "no-store, no-cache"
						},
						{
							"key": "expires",
							"value": "Thu, 01 Jan 1970 00:00:00 GMT"
						},
						{
							"key": "pragma",
							"value": "no-cache"
						},
						{
							"key": "x-ms-middleware-request-id",
							"value": "b433bbfd-0323-48d3-9896-2af809f63a78"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains"
						},
						{
							"key": "transfer-encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": \"Healthy\",\n    \"totalDuration\": \"00:00:00.0053008\",\n    \"entries\": {\n        \"sql\": {\n            \"data\": {},\n            \"duration\": \"00:00:00.0052018\",\n            \"status\": \"Healthy\",\n            \"tags\": []\n        }\n    }\n}"
				},
				{
					"name": "503 Service Unavailable",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						}
					},
					"status": "Service Unavailable",
					"code": 503,
					"_postman_previewlanguage": null,
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Date",
							"value": "Tue, 12 Aug 2025 23:33:03 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "Cache-Control",
							"value": "no-store, no-cache"
						},
						{
							"key": "Expires",
							"value": "Thu, 01 Jan 1970 00:00:00 GMT"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": \"Unhealthy\",\n    \"totalDuration\": \"00:00:04.8643141\",\n    \"entries\": {\n        \"sql\": {\n            \"data\": {},\n            \"description\": \"A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 40 - Could not open a connection to SQL Server)\",\n            \"duration\": \"00:00:04.8621251\",\n            \"exception\": \"A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 40 - Could not open a connection to SQL Server)\",\n            \"status\": \"Unhealthy\",\n            \"tags\": []\n        }\n    }\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}